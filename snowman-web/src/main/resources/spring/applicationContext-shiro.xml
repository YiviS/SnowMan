<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <description>Shiro Configuration</description>

    <!-- 缓存管理器 -->
    <bean id="CacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher"
          class="com.yivis.snowman.core.shiro.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="CacheManager"/>
        <property name="hashAlgorithmName" value="${hash_algorithm}"/>
        <property name="hashIterations" value="${hash_interations}"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id="shiroDbRealm" class="com.yivis.snowman.core.shiro.token.ShiroDbRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!-- 启用缓存，默认false -->
        <property name="cachingEnabled" value="false"/>
        <!--<property name="authenticationCachingEnabled" value="true"/>-->
        <!--<property name="authenticationCacheName" value="authenticationCache"/>-->
        <!--<property name="authorizationCachingEnabled" value="true"/>-->
        <!--<property name="authorizationCacheName" value="authorizationCache"/>-->
    </bean>

    <!-- 用户信息记住我功能的相关配置 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${remember.name}"/>
        <property name="httpOnly" value="${remember.httpOnly}"/>
        <property name="maxAge" value="${remember.maxAge}"/><!-- 30天时间，记住我30天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">

        <property name="cipherKey"
                  value="${remember.cipherKey}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 定义Shiro安全管理配置 Shiro的核心 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms" ref="shiroDbRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="CacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 自定义拦截器 -->
    <bean id="extendFormAuthenticationFilter"
          class="com.yivis.snowman.core.shiro.filter.ExtendFormAuthenticationFilter"/>
    <bean id="loginFilter" class="com.yivis.snowman.core.shiro.filter.LoginFilter"/>
    <bean id="kickoutSessionFilter" class="com.yivis.snowman.core.shiro.filter.KickoutSessionControlFilter">
        <property name="kickoutUrl" value="${filter.kickoutUrl}"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cache" ref="CacheManager"/>
    </bean>


    <!-- 安全认证过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="filters">
            <map>
                <!--<entry key="authc" value-ref="extendFormAuthenticationFilter"/>-->
                <entry key="login" value-ref="loginFilter"/>
                <entry key="kickout" value-ref="kickoutSessionFilter"/>
            </map>
        </property>
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="${shiroFilter.loginUrl}"/>
        <property name="successUrl" value="${shiroFilter.successUrl}"/>
        <property name="unauthorizedUrl" value="${shiroFilter.unauthorizedUrl}"/>
        <property name="filterChainDefinitions">
            <value>
                /login = login
                /submitLogin = anon
                /logout = logout
                /static/** = anon
                /plugins/** = anon
                /pc/geetest/** = anon
                /** = kickout,login
            </value>
        </property>
    </bean>

    <!-- 自定义Session存储容器 -->
    <bean id="idGen" class="com.yivis.snowman.core.utils.base.IdGen"/>
    <bean id="MySessionDao" class="com.yivis.snowman.core.shiro.session.MySessionDao">
        <property name="sessionIdGenerator" ref="idGen"/>
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="cacheManager" ref="CacheManager"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="${session.validate.timespan}"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="${sessionIdCookie.name}"/>
        <property name="httpOnly" value="${sessionIdCookie.httpOnly}"/>
        <property name="maxAge" value="${sessionIdCookie.maxAge}"/>
    </bean>

    <!-- 自定义会话管理配置 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="${sessionManager.globalSessionTimeout}"/>
        <property name="sessionValidationInterval" value="${sessionManager.sessionValidationInterval}"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="${sessionManager.sessionValidationSchedulerEnabled}"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="MySessionDao"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionIdUrlRewritingEnabled" value="${sessionManager.sessionIdUrlRewritingEnabled}"/>
    </bean>

    <!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--  AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

</beans>